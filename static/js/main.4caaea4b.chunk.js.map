{"version":3,"sources":["components/search.js","components/loader.js","components/images.js","components/title.js","components/clockWrap.js","components/date.js","components/dateTime.js","containers/dateTimeContainer.js","components/navBar.js","containers/navBarContainer.js","helpers/getWeatherToolTipClassName.js","components/weather.js","helpers/convertTemperature.js","helpers/newDate.js","containers/weatherContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","searchValue","setSearchValue","textInputRef","useRef","recentSearchValues","setRecentSearchValues","useEffect","current","focus","pastSearches","localStorage","getItem","pastSearchesArray","JSON","parse","setItem","stringify","onSearch","performSearch","settingOfRecentSearchValues","value","url","window","open","length","pop","unshift","className","src","alt","type","onInput","event","target","onKeyDown","key","ref","onClick","disabled","map","id","li","inital","opacity","y","animate","exit","transition","duration","override","css","Loader","props","color","size","style","margin","Images","images","setImages","isLoading","setIsLoading","label","searchQuery","setSearchQuery","fetch","headers","Authorization","then","response","json","data","photosArray","photos","photoItem","large","naturalSlideWidth","naturalSlideHeight","totalSlides","visibleSlides","interval","isPlaying","infinite","image","index","href","rel","backgroundImage","options","classNamePrefix","isSearchable","autoFocus","onChange","newSearchQuery","menuPlacement","components","Menu","menuProps","div","children","Title","title","updateTitle","ClockWrap","time","renderMinuteMarks","hourHandWidth","minuteHandWidth","minuteHandOppositeLength","Date","date","DateTime","DateTimeContainer","createReactClass","getInitialState","moment","format","componentDidMount","setInterval","tick","this","setState","render","state","NavBar","class","NavBarContainer","updatedTitle","componentDidUpdate","document","weather","weatherTooltipClassName","Weather","currentDay","temp","content","followCursor","plugins","getWeatherToolTipClassName","icon","sunrise","sunset","forecast","dayInfo","day","temperature","Math","round","Number","number","days","WeatherContainer","axios","get","convertTemperature","main","sunriseDate","newDate","sunsetDate","daily","dailyDataItem","dayIndex","dt","getDay","catch","error","console","favicon","getElementById","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.4caaea4b.chunk.js","sourcesContent":["import \"../styles/search.css\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\n\r\n// Used Hooks here\r\n\r\nfunction Search() {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const textInputRef = useRef();\r\n  const [recentSearchValues, setRecentSearchValues] = useState([]);\r\n\r\n  useEffect(() => {\r\n    textInputRef.current.focus();\r\n\r\n    const pastSearches = localStorage.getItem(\"RECENTSEARCHES\");\r\n    if (pastSearches) {\r\n      const pastSearchesArray = JSON.parse(pastSearches);\r\n      setRecentSearchValues(pastSearchesArray);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"RECENTSEARCHES\", JSON.stringify(recentSearchValues));\r\n  }, [recentSearchValues]);\r\n\r\n  const onSearch = () => {\r\n    performSearch(searchValue);\r\n\r\n    setSearchValue(\"\");\r\n    settingOfRecentSearchValues();\r\n  };\r\n\r\n  const performSearch = (value) => {\r\n    const url = `https://www.google.com/search?q=${value}`;\r\n    window.open(url);\r\n  };\r\n\r\n  const settingOfRecentSearchValues = () => {\r\n    if (recentSearchValues.length >= 6) {\r\n      recentSearchValues.pop();\r\n      recentSearchValues.unshift(searchValue);\r\n      setRecentSearchValues([...recentSearchValues]);\r\n    } else {\r\n      setRecentSearchValues([searchValue, ...recentSearchValues]);\r\n    }\r\n  };\r\n\r\n  const onSearchInputKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      onSearch();\r\n    }\r\n  };\r\n\r\n  const clearRecentSearchValues = (event) => {\r\n    setRecentSearchValues([]);\r\n  };\r\n\r\n  // added a useRef for input field, so it autofocuses when componenet mounts\r\n  // took out part of the onSearch function which opens up the window with searchValue, and put it into performSearch function\r\n  // so could call performSearch for the onclick in the list of recent searches\r\n\r\n  return (\r\n    <div className=\"contentItem search\">\r\n      <img\r\n        className=\"googleIcon\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png\"\r\n        alt=\"\"\r\n      />\r\n      <input\r\n        className=\"searchValue\"\r\n        type=\"text\"\r\n        value={searchValue}\r\n        onInput={(event) => setSearchValue(event.target.value)}\r\n        onKeyDown={onSearchInputKeyDown}\r\n        ref={textInputRef}\r\n      />\r\n      <button\r\n        className=\"searchButton\"\r\n        onClick={onSearch}\r\n        disabled={searchValue.length === 0}\r\n      >\r\n        Search\r\n      </button>\r\n      <div className=\"wrapRecentSearches\">\r\n        <div className=\"recentSearchesTitle\">\r\n          <p>Recent searches</p>\r\n          <button\r\n            className=\"clearRecentSearches\"\r\n            onClick={clearRecentSearchValues}\r\n          ></button>\r\n        </div>\r\n\r\n        <ul className=\"recentSearches\">\r\n          <AnimatePresence>\r\n            {recentSearchValues.map((value, id) => {\r\n              return (\r\n                <motion.li\r\n                  inital={{ opacity: 0, y: -150 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  exit={{ opacity: 0, y: -150 }}\r\n                  transition={{ duration: 0.8 }}\r\n                  key={id + 1}\r\n                  className=\"recentSearch\"\r\n                  onClick={() => performSearch(value)}\r\n                >\r\n                  {value}\r\n                </motion.li>\r\n              );\r\n            })}\r\n          </AnimatePresence>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import { CircleLoader } from \"react-spinners\";\r\nimport { css } from \"@emotion/react\";\r\n\r\nconst override = css`\r\n  margin: 25px;\r\n`;\r\n\r\nconst Loader = (props) => {\r\n  return (\r\n    <CircleLoader\r\n      css={override}\r\n      color=\"darkblue\"\r\n      size={100}\r\n      style={{ margin: \"50px\" }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"../styles/images.css\";\r\nimport { CarouselProvider, Slider, Slide } from \"pure-react-carousel\";\r\nimport \"pure-react-carousel/dist/react-carousel.es.css\";\r\nimport Select from \"react-select\";\r\nimport Loader from \"./loader\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { components } from \"react-select\";\r\n\r\nconst PEXELS_API_KEY =\r\n  \"563492ad6f917000010000019638a7e317574370b239afeca6603408\";\r\n\r\n// Using Hooks and using fetch instead of axios for get request\r\n// added in select library and passed in options array to change search query value\r\n// removed isShowingDropdown state and chevron code\r\n\r\nfunction Images() {\r\n  const [images, setImages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState({\r\n    value: \"landscape\",\r\n    label: \"Landscape\",\r\n  });\r\n  // const [isShowingDropdown, setIsShowingDropdown] = useState(false);\r\n\r\n  const options = [\r\n    { value: \"landscape\", label: \"Landscape\" },\r\n    { value: \"sunset sky\", label: \"Sunset Sky\" },\r\n    { value: \"sunrise sky\", label: \"Sunrise sky\" },\r\n    { value: \"mountains\", label: \"Mountains\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://api.pexels.com/v1/search?query=${searchQuery.value}&per_page=15&orientation=portrait`,\r\n      {\r\n        headers: { Authorization: PEXELS_API_KEY },\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const photosArray = data.photos.map((photoItem) => {\r\n          return {\r\n            value: photoItem.src.large,\r\n            url: photoItem.url,\r\n          };\r\n        });\r\n        setImages(photosArray);\r\n\r\n        setIsLoading(false);\r\n      });\r\n  }, [searchQuery]);\r\n\r\n  const ChangeImages = (newSearchQuery) => {\r\n    setSearchQuery(newSearchQuery);\r\n  };\r\n\r\n  // Menu component to pass into select tag for animation\r\n\r\n  const Menu = (menuProps) => (\r\n    <AnimatePresence>\r\n      <motion.div\r\n        inital={{ opacity: 0, y: -50 }}\r\n        animate={{ opacity: 1, y: -50 }}\r\n        exit={{ opacity: 0, y: -150 }}\r\n        transition={{ duration: 0.7 }}\r\n      >\r\n        <components.Menu {...menuProps}>{menuProps.children}</components.Menu>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n\r\n  // div used instead of img tag in carousel due to img not covering whole background of each individual slide\r\n\r\n  return (\r\n    <div className=\"contentItem images\">\r\n      <div className=\"imageCarousel\">\r\n        {isLoading ? (\r\n          <Loader />\r\n        ) : (\r\n          <CarouselProvider\r\n            naturalSlideWidth={400}\r\n            naturalSlideHeight={500}\r\n            totalSlides={15}\r\n            visibleSlides={1}\r\n            interval={10000}\r\n            isPlaying={true}\r\n            infinite={true}\r\n          >\r\n            <Slider>\r\n              {images.map((image, index) => {\r\n                return (\r\n                  <Slide index={index}>\r\n                    <a href={image.url} target=\"_blank\" rel=\"noreferrer\">\r\n                      <div\r\n                        className=\"slideImage\"\r\n                        style={{ backgroundImage: `url(${image.value})` }}\r\n                      ></div>\r\n                    </a>\r\n                  </Slide>\r\n                );\r\n              })}\r\n            </Slider>\r\n          </CarouselProvider>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <div className=\"selectArea\">\r\n          <Select\r\n            options={options}\r\n            value={searchQuery}\r\n            classNamePrefix=\"selectDropdownImages\"\r\n            isSearchable={false}\r\n            autoFocus={false}\r\n            onChange={ChangeImages}\r\n            menuPlacement=\"top\"\r\n            components={{ Menu }}\r\n          ></Select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Images;\r\n\r\n/* code before added in select library \r\n/* <select\r\n        name=\"searchQuery\"\r\n        id=\"searchQuery\"\r\n        onChange={(event) => setSearchQuery(event.target.value)}\r\n      >\r\n        <option value=\"landscape\">landscape</option>\r\n        <option value=\"Sunset Sky\">Sunset Sky</option>\r\n        <option value=\"Sunrise Sky\">Sunrise Sky</option>\r\n        <option value=\"Mountains\">Mountains</option>\r\n      </select> */\r\n\r\n/* code for isShowingDropdown with the chevron to display the select onclick\r\n         /* <button\r\n          className=\"isShowingDropdownButton\"\r\n          style={{\r\n            backgroundImage: isShowingDropdown\r\n              ? `url(${process.env.PUBLIC_URL + \"/up-chevron.png\"})`\r\n              : `url(${process.env.PUBLIC_URL + \"/down-chevron.png\"})`,\r\n          }}\r\n          onClick={() => setIsShowingDropdown(!isShowingDropdown)}\r\n        ></button> */\r\n\r\n/* {isShowingDropdown ? ( */\r\n","function Title(props) {\r\n  return (\r\n    <div className=\"title\">\r\n      <input\r\n        className=\"inputTitle\"\r\n        type=\"text\"\r\n        value={props.title}\r\n        onChange={props.updateTitle}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import Clock from \"react-clock\";\r\nimport \"react-clock/dist/Clock.css\";\r\n\r\nfunction ClockWrap(props) {\r\n  return (\r\n    <div className=\"clockWrap\">\r\n      <Clock\r\n        className=\"dashboardClock\"\r\n        value={props.time}\r\n        size={130}\r\n        renderMinuteMarks={false}\r\n        hourHandWidth={5}\r\n        minuteHandWidth={3}\r\n        minuteHandOppositeLength={30}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClockWrap;\r\n","function Date(props) {\r\n  return (\r\n    <div className=\"dateElement\">\r\n      <p className=\"date\">{props.date}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Date;\r\n","import ClockWrap from \"./clockWrap\";\r\nimport Date from \"./date\";\r\nimport \"../styles/dateTime.css\";\r\n\r\nfunction DateTime(props) {\r\n  return (\r\n    <div className=\"dateTime\">\r\n      <Date date={props.date} />\r\n      <ClockWrap time={props.time} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateTime;\r\n","import createReactClass from \"create-react-class\";\r\nimport DateTime from \"../components/dateTime\";\r\nimport moment from \"moment\";\r\n\r\nconst DateTimeContainer = createReactClass({\r\n  getInitialState() {\r\n    return {\r\n      date: moment().format(\"LL\"),\r\n      time: new Date(),\r\n    };\r\n  },\r\n\r\n  componentDidMount() {\r\n    setInterval(() => this.tick(), 1000);\r\n  },\r\n\r\n  tick() {\r\n    this.setState({\r\n      time: new Date(),\r\n    });\r\n  },\r\n\r\n  render() {\r\n    return <DateTime date={this.state.date} time={this.state.time} />;\r\n  },\r\n});\r\n\r\nexport default DateTimeContainer;\r\n","import Title from \"./title\";\r\nimport DateTimeContainer from \"../containers/dateTimeContainer\";\r\nimport \"../styles/navBar.css\";\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <div class=\"navBar\">\r\n      <Title title={props.title} updateTitle={props.updateTitle} />\r\n      <DateTimeContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import createReactClass from \"create-react-class\";\r\nimport NavBar from \"../components/navBar\";\r\n\r\n//took out title functionality from header component to put into navbar\r\n\r\nconst NavBarContainer = createReactClass({\r\n  getInitialState() {\r\n    return {\r\n      title: \"Dashboard\",\r\n    };\r\n  },\r\n\r\n  componentDidMount() {\r\n    const updatedTitle = localStorage.getItem(\"TITLE\");\r\n    if (updatedTitle) {\r\n      this.setState({\r\n        title: updatedTitle,\r\n      });\r\n    }\r\n  },\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem(\"TITLE\", this.state.title);\r\n  },\r\n\r\n  updateTitle(event) {\r\n    this.setState({\r\n      title: event.target.value,\r\n    });\r\n  },\r\n\r\n  render() {\r\n    document.title = this.state.title;\r\n    return <NavBar title={this.state.title} updateTitle={this.updateTitle} />;\r\n  },\r\n});\r\n\r\nexport default NavBarContainer;\r\n","//  helper function to apply a different className dependent on what the weather is for currentDay & foreast\r\n\r\nexport default (weather) => {\r\n  let weatherTooltipClassName = \"weatherTooltip\";\r\n  if (weather === \"Clouds\") {\r\n    weatherTooltipClassName += \" weatherTooltip-Clouds\";\r\n  }\r\n  if (weather === \"Clear\") {\r\n    weatherTooltipClassName += \" weatherTooltip-Clear\";\r\n  }\r\n  if (weather === \"Rain\") {\r\n    weatherTooltipClassName += \" weatherTooltip-Rain\";\r\n  }\r\n  if (weather === \"Snow\") {\r\n    weatherTooltipClassName += \" weatherTooltip-Snow\";\r\n  }\r\n  return weatherTooltipClassName;\r\n};\r\n","import Tippy from \"@tippyjs/react\";\r\nimport \"tippy.js/dist/tippy.css\";\r\nimport { followCursor } from \"tippy.js\";\r\nimport getWeatherToolTipClassName from \"../helpers/getWeatherToolTipClassName\";\r\nimport \"../styles/weather.css\";\r\nimport Loader from \"./loader\";\r\n\r\nfunction Weather(props) {\r\n  return props.isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <div className=\"contentItem weather\">\r\n      <p className=\"currentDayTitle\">Today's weather</p>\r\n      <p className=\"temperatureC\">{`${props.currentDay.temp} C`}</p>\r\n\r\n      <Tippy\r\n        content={props.currentDay.weather}\r\n        followCursor\r\n        plugins={[followCursor]}\r\n        className={getWeatherToolTipClassName(props.currentDay.weather)}\r\n        // className={`weatherTooltip weatherTooltip-${props.currentDay.weather}`}\r\n      >\r\n        <img\r\n          src={`http://openweathermap.org/img/wn/${props.currentDay.icon}@4x.png`}\r\n          alt={props.currentDay.weather}\r\n          className=\"currentDayImage\"\r\n        ></img>\r\n      </Tippy>\r\n      <p className=\"currentDaySunrise\">{`Sunrise ${props.currentDay.sunrise}`}</p>\r\n      <p>{`Sunset ${props.currentDay.sunset}`}</p>\r\n\r\n      <ul className=\"weatherForecast\">\r\n        {props.forecast.map((dayInfo) => {\r\n          return (\r\n            <li className=\"weatherForecastItem\">\r\n              <p>{dayInfo.day}</p>\r\n              <p>{`${dayInfo.temperature} C`}</p>\r\n              <Tippy\r\n                content={dayInfo.weather}\r\n                followCursor\r\n                plugins={[followCursor]}\r\n                className={getWeatherToolTipClassName(dayInfo.weather)}\r\n              >\r\n                <img\r\n                  className=\"weatherForecastItemImage\"\r\n                  src={`http://openweathermap.org/img/wn/${dayInfo.icon}@4x.png`}\r\n                  alt={dayInfo.weather}\r\n                ></img>\r\n              </Tippy>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","//  helper function to convert the temperature from Kelvin to C\r\n\r\nexport default (temp) => {\r\n  return Math.round(Number(temp) - 273.15);\r\n};\r\n","//  helper function to convert into date format from Unix\r\n\r\nexport default (number) => {\r\n  return new Date(number * 1000);\r\n};\r\n","import createReactClass from \"create-react-class\";\r\nimport Weather from \"../components/weather\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport convertTemperature from \"../helpers/convertTemperature\";\r\nimport newDate from \"../helpers/newDate\";\r\n\r\nconst API_KEY = \"3d7ef965d57061670b60c97811df6490\";\r\nconst LATITUDE = \"51.135150\";\r\nconst LONGITUDE = \"-0.018840\";\r\n\r\nconst days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst WeatherContainer = createReactClass({\r\n  getInitialState() {\r\n    return {\r\n      forecast: [],\r\n      isLoading: true,\r\n      currentDay: {\r\n        temp: 0,\r\n        weather: \"\",\r\n        sunrise: \"\",\r\n        sunset: \"\",\r\n        icon: \"\",\r\n      },\r\n    };\r\n  },\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${LATITUDE}&lon=${LONGITUDE}&appid=${API_KEY}`\r\n      )\r\n      .then((response) => {\r\n        const temp = convertTemperature(response.data.current.temp);\r\n        // const temp = Math.round(Number(response.data.current.temp) - 273.15);\r\n        const weather = response.data.current.weather[0].main;\r\n        const sunriseDate = newDate(response.data.current.sunrise);\r\n        const sunrise = moment(sunriseDate).format(\"LT\");\r\n        const sunsetDate = newDate(response.data.current.sunset);\r\n        const sunset = moment(sunsetDate).format(\"LT\");\r\n        const icon = response.data.current.weather[0].icon;\r\n\r\n        const forecast = response.data.daily.map((dailyDataItem) => {\r\n          const dayIndex = newDate(dailyDataItem.dt).getDay();\r\n          const day = days[dayIndex];\r\n          // const dayTemp = Math.round(Number(dailyDataItem.temp.day) - 273.15);\r\n          const dayTemp = convertTemperature(dailyDataItem.temp.day);\r\n          const dayWeather = dailyDataItem.weather[0].main;\r\n          const dayIcon = dailyDataItem.weather[0].icon;\r\n          return {\r\n            day: day,\r\n            temperature: dayTemp,\r\n            weather: dayWeather,\r\n            icon: dayIcon,\r\n          };\r\n        });\r\n        // we don't want the current day to display in forecast array, and it will always be\r\n        // index 0, so by deleting it we skip over it\r\n        delete forecast[0];\r\n        this.setState({\r\n          forecast: forecast,\r\n          isLoading: false,\r\n          currentDay: {\r\n            temp: temp,\r\n            weather: weather,\r\n            sunrise: sunrise,\r\n            sunset: sunset,\r\n            icon: icon,\r\n          },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  },\r\n\r\n  // switch statement to change the favicon icon depending on what currentDay weather is\r\n  componentDidUpdate() {\r\n    const favicon = document.getElementById(\"favicon\");\r\n\r\n    switch (this.state.currentDay.weather) {\r\n      case \"Clouds\":\r\n        favicon.href = \"blueclouds.png\";\r\n        break;\r\n      case \"Rain\":\r\n        favicon.href = \"rainyicon.png\";\r\n        break;\r\n      case \"Clear\":\r\n        favicon.href = \"sunclearicon.png\";\r\n        break;\r\n      case \"Snow\":\r\n        favicon.href = \"snow.png\";\r\n        break;\r\n\r\n      default:\r\n        favicon.href = \"leaficon.png\";\r\n    }\r\n  },\r\n\r\n  render() {\r\n    return (\r\n      <Weather\r\n        forecast={this.state.forecast}\r\n        currentDay={this.state.currentDay}\r\n        isLoading={this.state.isLoading}\r\n      />\r\n    );\r\n  },\r\n});\r\n\r\nexport default WeatherContainer;\r\n","import \"./styles/App.css\";\nimport createReactClass from \"create-react-class\";\n\nimport Search from \"./components/search\";\nimport Images from \"./components/images\";\n\nimport NavBarContainer from \"./containers/navBarContainer\";\nimport WeatherContainer from \"./containers/weatherContainer\";\n\n//Images and search using hooks to practice knowledge\n// used a mix of hooks and classes in this project\n\nconst App = createReactClass({\n  getInitialState() {\n    return {};\n  },\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBarContainer />\n        <div className=\"contentWrap\">\n          <Images />\n          <Search />\n          <WeatherContainer />\n        </div>\n      </div>\n    );\n  },\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}